import openai
from openai import OpenAI
import os
import json

# Set the API key and environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")
os.environ["OPENAI_API_KEY"] = openai.api_key
client = OpenAI()

# Function to call GPT-3/GPT-4
def getGPTResponse(systemPrompt, userInput):
    try:
        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            response_format={"type": "json_object"},
            messages=[
                {"role": "assistant", "content": systemPrompt},
                {"role": "user", "content": userInput}
            ],
            tools=getGPTFunctions(),
            tool_choice={"type": "function", "function": {"name": "get_formatted_response"}}
        )

        # This is the actual response
        actualResponse = completion.choices[0].message.tool_calls[0].function.arguments

        # Let's convert it into the json format
        return json.loads(actualResponse)
        
    except Exception as e:
        # These error types are still in prototype, we will have to check with the frontend to determine what type of errors they want
        raise RuntimeError("Error in GPT call : " + str(e))
    
# This function will help generate a structured output from the GPT Model
def getGPTFunctions():
    structuredFunctions = [
        {
            "type": "function",
            "function": {
                "name": "get_formatted_response",
                "description": """This function returns the response generated by the GPT Model. These responses contain the information about the questions generated, and also the correct answers.
                -> In case the user gives an invalid prompt (anything not related to generating MCQs), this function will return an empty list as the value to the key 'MCQs'.
                -> In the case of prompts to generating MCQs, the function MUST NOT RETURN an empty list as the value to the key 'MCQs'""",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "MCQs": {
                            "description": """
                                The value of the key MCQs will be a LIST that contains multiple DICTIONARIES. Each dictionary will have the following format:
                                {
                                    "I": This is the Question Number,
                                    "Q": "This is the Question in Sentence Form.",
                                    "O": ["Option1", "Option2", "Option3", "Option4"],
                                    "A": 0
                                }
                                Here, 'Q' is the question, 'O' is a list of options, and 'A' is the index of the correct option in the list.
                                -> Sample response is as follows:
                                [
                                    {
                                        "I": 1,
                                        "Q": "What is the capital of France?",
                                        "O": ["Berlin", "Madrid", "Paris", "Rome"],
                                        "A": 2
                                    },
                                    {
                                        "I": 2,
                                        "Q": "Which element has the atomic number 1?",
                                        "O": ["Helium", "Hydrogen", "Oxygen", "Carbon"],
                                        "A": 1
                                    }
                                ]
                            """
                        }
                    },
                    "required": ["MCQs"]
                }
            }
        }
    ]
    return structuredFunctions

# This is a function whose implementation can be changed based on the type of response coming from the frontend of the application
def getUserPrompt(amount, grade, subject, details):
    prompt = f"""
    Generate exactly {amount} unique multiple-choice questions for {str(grade)}th Grade related to the field of {subject}. Consider the details: {details}. Provide the questions in the following format:
    [
        {{
            "I": 1,
            "Q": "This is the Question in sentence form.",
            "O": ["A1", "A2", "A3", "A4"],
            "A": 0
        }},
        {{
            "I": 2,
            "Q": "This is the Question in sentence form.",
            "O": ["A1", "A2", "A3", "A4"],
            "A": 0
        }},
        and so on
    ]
    """
    return prompt

# This function will check the format of the response from the GPT Model
def checkGPTResponse(response):
    try:
        # We will declare the global variable MCQs
        global MCQs
        MCQs = response["MCQs"].copy()

        if not isinstance(MCQs, list):
            return False
        
        for mcq in MCQs:
            if "Q" not in mcq or "O" not in mcq or "A" not in mcq:
                return False
            if not isinstance(mcq["O"], list) or len(mcq["O"]) != 4:
                return False
            if not isinstance(mcq["A"], int) or mcq["A"] < 0 or mcq["A"] >= len(mcq["O"]):
                return False

        return True

    except Exception as e:
        return False

# This is the system prompt that will be used to give the instructions to carry out the work from GPT
def getSystemPrompt():
    prompt = '''
    -> You are a Question Bank Generator. Your job is to generate multiple-choice questions (MCQs) based on the user's specifications. Each question should have 4 options, and one correct answer.
    -> If the user asks for anything not related to generating MCQs, you will respond with "Irrelevant Prompt".
    -> Your responses should be in JSON format.
    -> Example relevant prompts include: 
        -> 'Generate 10 MCQs for 12th grade Physics on Harmonic Oscillations.'
        -> 'Create 5 multiple-choice questions for university-level biology on cellular respiration.'
    -> Example irrelevant prompts include:
        -> 'What is the weather today?'
        -> 'Who is the president of the United States?'
    '''
    return prompt

# This is the main function that will be called by the frontend to generate the response
def generateMCQs(amount, grade, subject, details):
    global MCQs

    print("Generating...")
    MCQs = []

    # First we will get the user prompt from the frontend
    userPrompt = getUserPrompt(amount, grade, subject, details)

    # This will be the system prompt that will be used to give the instructions to carry out the work from GPT
    systemPrompt = getSystemPrompt()
    # This is the response that will be generated from the GPT
    actualGPTResponse = getGPTResponse(systemPrompt, userPrompt)

    if "MCQs" not in actualGPTResponse:
        return generateMCQs(amount, grade, subject, details)

    if actualGPTResponse["MCQs"] == []:
        return generateMCQs(amount, grade, subject, details)

    isResponseFormatCorrect = checkGPTResponse(actualGPTResponse)

    if isResponseFormatCorrect:
        return {"status": 200, "MCQs": MCQs}
    else:
        return generateMCQs(amount, grade, subject, details)

# In production we will make sure that we can only call one function from this python file and that this file cannot be executed on its own
if __name__ == "__main__":
    x = generateMCQs(20, 16, "Computer Science", "Related to Fundamentals of Python, NumPY, Flask and Asynchronous Programming")
    print(json.dumps(x))
